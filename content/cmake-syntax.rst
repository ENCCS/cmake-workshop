.. _cmake-syntax:


CMake syntax and project structure
==================================

.. questions::

   - How can we achieve more control over the build system generated by CMake?
   - Is it possible to let the user decide what to generate?


.. objectives::

   - Learn the syntax for conditionals in CMake: ``if`` - ``elseif`` - ``else`` - ``endif``
   - Learn the syntax for loops in CMake: ``foreach``
   - Learn how CMake structures build artifacts.
   - Learn how to print helpful messages.
   - Learn how to handle user-facing options: ``option`` and the role of the CMake cache.
   - Understand the difference between *macros* and *functions*.


Flow control
------------

.. todo::

   - if and foreach
   - How does the build tree look

.. challenge:: Conditionals in CMake

   Modify the ``CMakeLists.txt`` from the previous exercise to build either a
   *static* or a *shared* library depending  on the value of the boolean
   ``BUILD_SHARED_LIBS``.

   .. tabs::

      .. tab:: C++

         You can download the :download:`complete, working example <code/tarballs/conditionals-cxx_solution.tar.bz2>`.

      .. tab:: Fortran

         You can download the :download:`complete, working example <code/tarballs/conditionals-f_solution.tar.bz2>`.


.. typealong:: Loops in CMake


   .. tabs::

      .. tab:: C++

         You can download the :download:`complete, working example <code/tarballs/loops-cxx_solution.tar.bz2>`.



The build tree *vs* the source tree
-----------------------------------


Printing messages
-----------------

.. todo::

   - Introduce ``message``
   - Introduce ``CMakePrintHelpers`` and ``cmake_print_variables``



.. signature:: |message|

   .. code-block:: cmake

      message([<mode>] "message to display")

.. parameters::

   ``<mode>``
       What type of message to display, for example:

         - ``STATUS``, for incidental information.
         - ``FATAL_ERROR``, to report an error that prevents further processing and generation.


Including the built-in module ``CMakePrintHelpers`` will make your life easier when debugging:

.. signature:: |cmake_print_variables|

   .. code-block:: cmake

      cmake_print_variables(var1 var2 ... varN)

   This command accepts an arbitrary number of variables and prints their name and value to standard output.
   For example:

   .. code-block:: cmake

      include(CMakePrintHelpers)

      cmake_print_variables(CMAKE_C_COMPILER CMAKE_MAJOR_VERSION DOES_NOT_EXIST)

   gives:

   .. code-block:: text

      -- CMAKE_C_COMPILER="/usr/bin/gcc" ; CMAKE_MAJOR_VERSION="2" ; DOES_NOT_EXIST=""


Controlling the build with options
----------------------------------

.. todo::

   - options and dependent options
   - the CMake cache

.. challenge:: User-facing options

   DESCRIPTION

   .. tabs::

      .. tab:: C++

         You can download the :download:`complete, working example <code/tarballs/options-cxx_solution.tar.bz2>`.

      .. tab:: Fortran

         You can download the :download:`complete, working example <code/tarballs/options-f_solution.tar.bz2>`.



.. keypoints::

   - The structure of the project is mirrored in the build folder.
